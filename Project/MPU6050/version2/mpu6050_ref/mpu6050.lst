                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module mpu6050
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _segmentMap
                                     12 	.globl _main
                                     13 	.globl _getMPU6050
                                     14 	.globl _initMPU6050
                                     15 	.globl _tm1637DisplayDecimal
                                     16 	.globl _tm1637Init
                                     17 	.globl _InitializeUART
                                     18 	.globl _InitializeI2C
                                     19 	.globl _i2c_read_register
                                     20 	.globl _print_byte_hex
                                     21 	.globl _i2c_set_start_ack
                                     22 	.globl _i2c_send_address
                                     23 	.globl _UARTPrintF
                                     24 	.globl _i2c_send_reg
                                     25 	.globl _i2c_set_stop
                                     26 	.globl _i2c_set_nak
                                     27 	.globl _i2c_read
                                     28 	.globl _delay
                                     29 	.globl _InitializeSystemClock
                                     30 	.globl _delayTenMicro
                                     31 	.globl _tm1637SetBrightness
                                     32 	.globl __tm1637Start
                                     33 	.globl __tm1637Stop
                                     34 	.globl __tm1637ReadResult
                                     35 	.globl __tm1637WriteByte
                                     36 	.globl __tm1637ClkHigh
                                     37 	.globl __tm1637ClkLow
                                     38 	.globl __tm1637DioHigh
                                     39 	.globl __tm1637DioLow
                                     40 ;--------------------------------------------------------
                                     41 ; ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area DATA
                                     44 ;--------------------------------------------------------
                                     45 ; ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area INITIALIZED
                                     48 ;--------------------------------------------------------
                                     49 ; Stack segment in internal ram
                                     50 ;--------------------------------------------------------
                                     51 	.area SSEG
      000000                         52 __start__stack:
      000000                         53 	.ds	1
                                     54 
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area DABS (ABS)
                                     59 
                                     60 ; default segment ordering for linker
                                     61 	.area HOME
                                     62 	.area GSINIT
                                     63 	.area GSFINAL
                                     64 	.area CONST
                                     65 	.area INITIALIZER
                                     66 	.area CODE
                                     67 
                                     68 ;--------------------------------------------------------
                                     69 ; interrupt vector
                                     70 ;--------------------------------------------------------
                                     71 	.area HOME
      000000                         72 __interrupt_vect:
      000000 82v00u00u00             73 	int s_GSINIT ; reset
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME
                                     78 	.area GSINIT
                                     79 	.area GSFINAL
                                     80 	.area GSINIT
      000000 CDr00r00         [ 4]   81 	call	___sdcc_external_startup
      000003 4D               [ 1]   82 	tnz	a
      000004 27 03            [ 1]   83 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]   84 	jp	__sdcc_program_startup
      000009                         85 __sdcc_init_data:
                                     86 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]   87 	ldw x, #l_DATA
      00000C 27 07            [ 1]   88 	jreq	00002$
      00000E                         89 00001$:
      00000E 72 4FuFFuFF      [ 1]   90 	clr (s_DATA - 1, x)
      000012 5A               [ 2]   91 	decw x
      000013 26 F9            [ 1]   92 	jrne	00001$
      000015                         93 00002$:
      000015 AEr00r00         [ 2]   94 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]   95 	jreq	00004$
      00001A                         96 00003$:
      00001A D6uFFuFF         [ 1]   97 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]   98 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]   99 	decw	x
      000021 26 F7            [ 1]  100 	jrne	00003$
      000023                        101 00004$:
                                    102 ; stm8_genXINIT() end
                                    103 	.area GSFINAL
      000000 CCr00r04         [ 2]  104 	jp	__sdcc_program_startup
                                    105 ;--------------------------------------------------------
                                    106 ; Home
                                    107 ;--------------------------------------------------------
                                    108 	.area HOME
                                    109 	.area HOME
      000004                        110 __sdcc_program_startup:
      000004 CCr03rF0         [ 2]  111 	jp	_main
                                    112 ;	return from main will return to caller
                                    113 ;--------------------------------------------------------
                                    114 ; code
                                    115 ;--------------------------------------------------------
                                    116 	.area CODE
                                    117 ;	mpu6050.c: 17: void delayTenMicro (void) {
                                    118 ;	-----------------------------------------
                                    119 ;	 function delayTenMicro
                                    120 ;	-----------------------------------------
      000000                        121 _delayTenMicro:
                                    122 ;	mpu6050.c: 19: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  123 	ld	a, #0x32
      000002                        124 00104$:
                                    125 ;	mpu6050.c: 20: __asm__("nop");
      000002 9D               [ 1]  126 	nop
      000003 4A               [ 1]  127 	dec	a
                                    128 ;	mpu6050.c: 19: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  129 	tnz	a
      000005 26 FB            [ 1]  130 	jrne	00104$
                                    131 ;	mpu6050.c: 21: }
      000007 81               [ 4]  132 	ret
                                    133 ;	mpu6050.c: 23: void InitializeSystemClock() {
                                    134 ;	-----------------------------------------
                                    135 ;	 function InitializeSystemClock
                                    136 ;	-----------------------------------------
      000008                        137 _InitializeSystemClock:
                                    138 ;	mpu6050.c: 24: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000008 35 00 50 C0      [ 1]  139 	mov	0x50c0+0, #0x00
                                    140 ;	mpu6050.c: 25: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      00000C 35 01 50 C0      [ 1]  141 	mov	0x50c0+0, #0x01
                                    142 ;	mpu6050.c: 26: CLK_ECKR = 0;                       //  Disable the external clock.
      000010 35 00 50 C1      [ 1]  143 	mov	0x50c1+0, #0x00
                                    144 ;	mpu6050.c: 27: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000014                        145 00101$:
      000014 72 03 50 C0 FB   [ 2]  146 	btjf	0x50c0, #1, 00101$
                                    147 ;	mpu6050.c: 28: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      000019 35 00 50 C6      [ 1]  148 	mov	0x50c6+0, #0x00
                                    149 ;	mpu6050.c: 29: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      00001D 35 FF 50 C7      [ 1]  150 	mov	0x50c7+0, #0xff
                                    151 ;	mpu6050.c: 30: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000021 35 FF 50 CA      [ 1]  152 	mov	0x50ca+0, #0xff
                                    153 ;	mpu6050.c: 31: CLK_CCOR = 0;                       //  Turn off CCO.
      000025 35 00 50 C9      [ 1]  154 	mov	0x50c9+0, #0x00
                                    155 ;	mpu6050.c: 32: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      000029 35 00 50 CC      [ 1]  156 	mov	0x50cc+0, #0x00
                                    157 ;	mpu6050.c: 33: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      00002D 35 00 50 CD      [ 1]  158 	mov	0x50cd+0, #0x00
                                    159 ;	mpu6050.c: 34: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      000031 35 E1 50 C4      [ 1]  160 	mov	0x50c4+0, #0xe1
                                    161 ;	mpu6050.c: 35: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      000035 35 00 50 C5      [ 1]  162 	mov	0x50c5+0, #0x00
                                    163 ;	mpu6050.c: 36: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000039 35 02 50 C5      [ 1]  164 	mov	0x50c5+0, #0x02
                                    165 ;	mpu6050.c: 37: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      00003D                        166 00104$:
      00003D 72 00 50 C5 FB   [ 2]  167 	btjt	0x50c5, #0, 00104$
                                    168 ;	mpu6050.c: 38: }
      000042 81               [ 4]  169 	ret
                                    170 ;	mpu6050.c: 39: void delay (int time_ms) {
                                    171 ;	-----------------------------------------
                                    172 ;	 function delay
                                    173 ;	-----------------------------------------
      000043                        174 _delay:
      000043 52 0A            [ 2]  175 	sub	sp, #10
      000045 51               [ 1]  176 	exgw	x, y
                                    177 ;	mpu6050.c: 41: for (x = 0; x < 1036*time_ms; ++x)
      000046 5F               [ 1]  178 	clrw	x
      000047 1F 03            [ 2]  179 	ldw	(0x03, sp), x
      000049 1F 01            [ 2]  180 	ldw	(0x01, sp), x
      00004B 90 89            [ 2]  181 	pushw	y
      00004D AE 04 0C         [ 2]  182 	ldw	x, #0x040c
      000050 CDr00r00         [ 4]  183 	call	__mulint
      000053 1F 05            [ 2]  184 	ldw	(0x05, sp), x
      000055                        185 00103$:
      000055 16 05            [ 2]  186 	ldw	y, (0x05, sp)
      000057 17 09            [ 2]  187 	ldw	(0x09, sp), y
      000059 7B 09            [ 1]  188 	ld	a, (0x09, sp)
      00005B 49               [ 1]  189 	rlc	a
      00005C 4F               [ 1]  190 	clr	a
      00005D A2 00            [ 1]  191 	sbc	a, #0x00
      00005F 6B 08            [ 1]  192 	ld	(0x08, sp), a
      000061 6B 07            [ 1]  193 	ld	(0x07, sp), a
      000063 1E 03            [ 2]  194 	ldw	x, (0x03, sp)
      000065 13 09            [ 2]  195 	cpw	x, (0x09, sp)
      000067 7B 02            [ 1]  196 	ld	a, (0x02, sp)
      000069 12 08            [ 1]  197 	sbc	a, (0x08, sp)
      00006B 7B 01            [ 1]  198 	ld	a, (0x01, sp)
      00006D 12 07            [ 1]  199 	sbc	a, (0x07, sp)
      00006F 2E 12            [ 1]  200 	jrsge	00105$
                                    201 ;	mpu6050.c: 42: __asm__("nop");
      000071 9D               [ 1]  202 	nop
                                    203 ;	mpu6050.c: 41: for (x = 0; x < 1036*time_ms; ++x)
      000072 1E 03            [ 2]  204 	ldw	x, (0x03, sp)
      000074 1C 00 01         [ 2]  205 	addw	x, #0x0001
      000077 16 01            [ 2]  206 	ldw	y, (0x01, sp)
      000079 24 02            [ 1]  207 	jrnc	00118$
      00007B 90 5C            [ 1]  208 	incw	y
      00007D                        209 00118$:
      00007D 1F 03            [ 2]  210 	ldw	(0x03, sp), x
      00007F 17 01            [ 2]  211 	ldw	(0x01, sp), y
      000081 20 D2            [ 2]  212 	jra	00103$
      000083                        213 00105$:
                                    214 ;	mpu6050.c: 43: }
      000083 5B 0A            [ 2]  215 	addw	sp, #10
      000085 81               [ 4]  216 	ret
                                    217 ;	mpu6050.c: 44: void i2c_read (unsigned char *x) {
                                    218 ;	-----------------------------------------
                                    219 ;	 function i2c_read
                                    220 ;	-----------------------------------------
      000086                        221 _i2c_read:
                                    222 ;	mpu6050.c: 45: while ((I2C_SR1 & I2C_RXNE) == 0);
      000086                        223 00101$:
      000086 72 0D 52 17 FB   [ 2]  224 	btjf	0x5217, #6, 00101$
                                    225 ;	mpu6050.c: 46: *x = I2C_DR;
      00008B C6 52 16         [ 1]  226 	ld	a, 0x5216
      00008E F7               [ 1]  227 	ld	(x), a
                                    228 ;	mpu6050.c: 47: }
      00008F 81               [ 4]  229 	ret
                                    230 ;	mpu6050.c: 48: void i2c_set_nak (void) {
                                    231 ;	-----------------------------------------
                                    232 ;	 function i2c_set_nak
                                    233 ;	-----------------------------------------
      000090                        234 _i2c_set_nak:
                                    235 ;	mpu6050.c: 49: I2C_CR2 &= ~I2C_ACK;
      000090 72 15 52 11      [ 1]  236 	bres	0x5211, #2
                                    237 ;	mpu6050.c: 50: }
      000094 81               [ 4]  238 	ret
                                    239 ;	mpu6050.c: 51: void i2c_set_stop (void) {
                                    240 ;	-----------------------------------------
                                    241 ;	 function i2c_set_stop
                                    242 ;	-----------------------------------------
      000095                        243 _i2c_set_stop:
                                    244 ;	mpu6050.c: 52: I2C_CR2 |= I2C_STOP;
      000095 72 12 52 11      [ 1]  245 	bset	0x5211, #1
                                    246 ;	mpu6050.c: 53: }
      000099 81               [ 4]  247 	ret
                                    248 ;	mpu6050.c: 54: void i2c_send_reg (UCHAR addr) {
                                    249 ;	-----------------------------------------
                                    250 ;	 function i2c_send_reg
                                    251 ;	-----------------------------------------
      00009A                        252 _i2c_send_reg:
      00009A 52 03            [ 2]  253 	sub	sp, #3
      00009C 6B 03            [ 1]  254 	ld	(0x03, sp), a
                                    255 ;	mpu6050.c: 56: reg = I2C_SR1;
      00009E C6 52 17         [ 1]  256 	ld	a, 0x5217
      0000A1 5F               [ 1]  257 	clrw	x
      0000A2 97               [ 1]  258 	ld	xl, a
      0000A3 1F 01            [ 2]  259 	ldw	(0x01, sp), x
                                    260 ;	mpu6050.c: 57: reg = I2C_SR3;
      0000A5 C6 52 19         [ 1]  261 	ld	a, 0x5219
      0000A8 5F               [ 1]  262 	clrw	x
      0000A9 97               [ 1]  263 	ld	xl, a
      0000AA 1F 01            [ 2]  264 	ldw	(0x01, sp), x
                                    265 ;	mpu6050.c: 58: I2C_DR = addr;
      0000AC AE 52 16         [ 2]  266 	ldw	x, #0x5216
      0000AF 7B 03            [ 1]  267 	ld	a, (0x03, sp)
      0000B1 F7               [ 1]  268 	ld	(x), a
                                    269 ;	mpu6050.c: 59: while ((I2C_SR1 & I2C_TXE) == 0);
      0000B2                        270 00101$:
      0000B2 C6 52 17         [ 1]  271 	ld	a, 0x5217
      0000B5 2A FB            [ 1]  272 	jrpl	00101$
                                    273 ;	mpu6050.c: 60: }
      0000B7 5B 03            [ 2]  274 	addw	sp, #3
      0000B9 81               [ 4]  275 	ret
                                    276 ;	mpu6050.c: 63: void UARTPrintF (char *message) {
                                    277 ;	-----------------------------------------
                                    278 ;	 function UARTPrintF
                                    279 ;	-----------------------------------------
      0000BA                        280 _UARTPrintF:
                                    281 ;	mpu6050.c: 65: while (*ch) {
      0000BA                        282 00104$:
      0000BA F6               [ 1]  283 	ld	a, (x)
      0000BB 26 01            [ 1]  284 	jrne	00130$
      0000BD 81               [ 4]  285 	ret
      0000BE                        286 00130$:
                                    287 ;	mpu6050.c: 66: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0000BE C7 52 31         [ 1]  288 	ld	0x5231, a
                                    289 ;	mpu6050.c: 67: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0000C1                        290 00101$:
      0000C1 C6 52 30         [ 1]  291 	ld	a, 0x5230
      0000C4 2A FB            [ 1]  292 	jrpl	00101$
                                    293 ;	mpu6050.c: 68: ch++;                               //  Grab the next character.
      0000C6 5C               [ 1]  294 	incw	x
      0000C7 20 F1            [ 2]  295 	jra	00104$
                                    296 ;	mpu6050.c: 70: }
      0000C9 81               [ 4]  297 	ret
                                    298 ;	mpu6050.c: 74: void i2c_send_address (UCHAR addr, UCHAR mode) {
                                    299 ;	-----------------------------------------
                                    300 ;	 function i2c_send_address
                                    301 ;	-----------------------------------------
      0000CA                        302 _i2c_send_address:
      0000CA 52 03            [ 2]  303 	sub	sp, #3
      0000CC 97               [ 1]  304 	ld	xl, a
                                    305 ;	mpu6050.c: 76: reg = I2C_SR1;
      0000CD C6 52 17         [ 1]  306 	ld	a, 0x5217
      0000D0 90 5F            [ 1]  307 	clrw	y
      0000D2 90 97            [ 1]  308 	ld	yl, a
      0000D4 17 01            [ 2]  309 	ldw	(0x01, sp), y
                                    310 ;	mpu6050.c: 77: I2C_DR = (addr << 1) | mode;
      0000D6 9F               [ 1]  311 	ld	a, xl
      0000D7 48               [ 1]  312 	sll	a
      0000D8 1A 06            [ 1]  313 	or	a, (0x06, sp)
      0000DA C7 52 16         [ 1]  314 	ld	0x5216, a
                                    315 ;	mpu6050.c: 78: if (mode == I2C_READ) {
      0000DD 7B 06            [ 1]  316 	ld	a, (0x06, sp)
      0000DF 4A               [ 1]  317 	dec	a
      0000E0 26 05            [ 1]  318 	jrne	00131$
      0000E2 A6 01            [ 1]  319 	ld	a, #0x01
      0000E4 6B 03            [ 1]  320 	ld	(0x03, sp), a
      0000E6 C5                     321 	.byte 0xc5
      0000E7                        322 00131$:
      0000E7 0F 03            [ 1]  323 	clr	(0x03, sp)
      0000E9                        324 00132$:
      0000E9 0D 03            [ 1]  325 	tnz	(0x03, sp)
      0000EB 27 08            [ 1]  326 	jreq	00103$
                                    327 ;	mpu6050.c: 79: I2C_OARL = 0;
      0000ED 35 00 52 13      [ 1]  328 	mov	0x5213+0, #0x00
                                    329 ;	mpu6050.c: 80: I2C_OARH = 0;
      0000F1 35 00 52 14      [ 1]  330 	mov	0x5214+0, #0x00
                                    331 ;	mpu6050.c: 83: while ((I2C_SR1 & I2C_ADDR) == 0);
      0000F5                        332 00103$:
                                    333 ;	mpu6050.c: 76: reg = I2C_SR1;
      0000F5 C6 52 17         [ 1]  334 	ld	a, 0x5217
                                    335 ;	mpu6050.c: 83: while ((I2C_SR1 & I2C_ADDR) == 0);
      0000F8 A5 02            [ 1]  336 	bcp	a, #0x02
      0000FA 27 F9            [ 1]  337 	jreq	00103$
                                    338 ;	mpu6050.c: 84: if (mode == I2C_READ)
      0000FC 0D 03            [ 1]  339 	tnz	(0x03, sp)
      0000FE 27 05            [ 1]  340 	jreq	00108$
                                    341 ;	mpu6050.c: 85: UNSET (I2C_SR1, I2C_ADDR);
      000100 A4 FD            [ 1]  342 	and	a, #0xfd
      000102 C7 52 17         [ 1]  343 	ld	0x5217, a
      000105                        344 00108$:
                                    345 ;	mpu6050.c: 86: }
      000105 5B 03            [ 2]  346 	addw	sp, #3
      000107 85               [ 2]  347 	popw	x
      000108 84               [ 1]  348 	pop	a
      000109 FC               [ 2]  349 	jp	(x)
                                    350 ;	mpu6050.c: 88: void i2c_set_start_ack (void) {
                                    351 ;	-----------------------------------------
                                    352 ;	 function i2c_set_start_ack
                                    353 ;	-----------------------------------------
      00010A                        354 _i2c_set_start_ack:
                                    355 ;	mpu6050.c: 89: I2C_CR2 = I2C_ACK | I2C_START;
      00010A 35 05 52 11      [ 1]  356 	mov	0x5211+0, #0x05
                                    357 ;	mpu6050.c: 90: while ((I2C_SR1 & I2C_SB) == 0);
      00010E                        358 00101$:
      00010E 72 01 52 17 FB   [ 2]  359 	btjf	0x5217, #0, 00101$
                                    360 ;	mpu6050.c: 91: }
      000113 81               [ 4]  361 	ret
                                    362 ;	mpu6050.c: 97: void print_byte_hex (unsigned char buffer) {
                                    363 ;	-----------------------------------------
                                    364 ;	 function print_byte_hex
                                    365 ;	-----------------------------------------
      000114                        366 _print_byte_hex:
      000114 52 0A            [ 2]  367 	sub	sp, #10
                                    368 ;	mpu6050.c: 100: a = (buffer >> 4);
      000116 97               [ 1]  369 	ld	xl, a
      000117 4E               [ 1]  370 	swap	a
      000118 A4 0F            [ 1]  371 	and	a, #0x0f
      00011A 41               [ 1]  372 	exg	a, xl
      00011B 02               [ 1]  373 	rlwa	x
      00011C 4F               [ 1]  374 	clr	a
      00011D 01               [ 1]  375 	rrwa	x
                                    376 ;	mpu6050.c: 101: if (a > 9)
      00011E A3 00 09         [ 2]  377 	cpw	x, #0x0009
      000121 2D 07            [ 1]  378 	jrsle	00102$
                                    379 ;	mpu6050.c: 102: a = a + 'a' - 10;
      000123 1C 00 57         [ 2]  380 	addw	x, #0x0057
      000126 1F 09            [ 2]  381 	ldw	(0x09, sp), x
      000128 20 05            [ 2]  382 	jra	00103$
      00012A                        383 00102$:
                                    384 ;	mpu6050.c: 104: a += '0'; 
      00012A 1C 00 30         [ 2]  385 	addw	x, #0x0030
      00012D 1F 09            [ 2]  386 	ldw	(0x09, sp), x
      00012F                        387 00103$:
                                    388 ;	mpu6050.c: 105: b = buffer & 0x0f;
      00012F A4 0F            [ 1]  389 	and	a, #0x0f
      000131 97               [ 1]  390 	ld	xl, a
      000132 4F               [ 1]  391 	clr	a
      000133 95               [ 1]  392 	ld	xh, a
                                    393 ;	mpu6050.c: 106: if (b > 9)
      000134 A3 00 09         [ 2]  394 	cpw	x, #0x0009
      000137 2D 05            [ 1]  395 	jrsle	00105$
                                    396 ;	mpu6050.c: 107: b = b + 'a' - 10;
      000139 1C 00 57         [ 2]  397 	addw	x, #0x0057
      00013C 20 03            [ 2]  398 	jra	00106$
      00013E                        399 00105$:
                                    400 ;	mpu6050.c: 109: b += '0'; 
      00013E 1C 00 30         [ 2]  401 	addw	x, #0x0030
      000141                        402 00106$:
                                    403 ;	mpu6050.c: 110: message[0] = a;
      000141 7B 0A            [ 1]  404 	ld	a, (0x0a, sp)
      000143 6B 01            [ 1]  405 	ld	(0x01, sp), a
                                    406 ;	mpu6050.c: 111: message[1] = b;
      000145 9F               [ 1]  407 	ld	a, xl
      000146 6B 02            [ 1]  408 	ld	(0x02, sp), a
                                    409 ;	mpu6050.c: 112: message[2] = 0;
      000148 0F 03            [ 1]  410 	clr	(0x03, sp)
                                    411 ;	mpu6050.c: 113: UARTPrintF (message);
      00014A 96               [ 1]  412 	ldw	x, sp
      00014B 5C               [ 1]  413 	incw	x
      00014C CDr00rBA         [ 4]  414 	call	_UARTPrintF
                                    415 ;	mpu6050.c: 114: }
      00014F 5B 0A            [ 2]  416 	addw	sp, #10
      000151 81               [ 4]  417 	ret
                                    418 ;	mpu6050.c: 117: unsigned char i2c_read_register (UCHAR addr, UCHAR rg) {
                                    419 ;	-----------------------------------------
                                    420 ;	 function i2c_read_register
                                    421 ;	-----------------------------------------
      000152                        422 _i2c_read_register:
      000152 52 03            [ 2]  423 	sub	sp, #3
      000154 6B 03            [ 1]  424 	ld	(0x03, sp), a
                                    425 ;	mpu6050.c: 120: i2c_set_start_ack ();
      000156 CDr01r0A         [ 4]  426 	call	_i2c_set_start_ack
                                    427 ;	mpu6050.c: 121: i2c_send_address (addr, I2C_WRITE);
      000159 4B 00            [ 1]  428 	push	#0x00
      00015B 7B 04            [ 1]  429 	ld	a, (0x04, sp)
      00015D CDr00rCA         [ 4]  430 	call	_i2c_send_address
                                    431 ;	mpu6050.c: 122: i2c_send_reg (rg);
      000160 7B 06            [ 1]  432 	ld	a, (0x06, sp)
      000162 CDr00r9A         [ 4]  433 	call	_i2c_send_reg
                                    434 ;	mpu6050.c: 123: i2c_set_start_ack ();
      000165 CDr01r0A         [ 4]  435 	call	_i2c_set_start_ack
                                    436 ;	mpu6050.c: 124: i2c_send_address (addr, I2C_READ);
      000168 4B 01            [ 1]  437 	push	#0x01
      00016A 7B 04            [ 1]  438 	ld	a, (0x04, sp)
      00016C CDr00rCA         [ 4]  439 	call	_i2c_send_address
                                    440 ;	mpu6050.c: 125: reg = I2C_SR1;
      00016F C6 52 17         [ 1]  441 	ld	a, 0x5217
      000172 6B 01            [ 1]  442 	ld	(0x01, sp), a
                                    443 ;	mpu6050.c: 126: reg = I2C_SR3;
      000174 C6 52 19         [ 1]  444 	ld	a, 0x5219
      000177 6B 01            [ 1]  445 	ld	(0x01, sp), a
                                    446 ;	mpu6050.c: 127: i2c_set_nak ();
      000179 CDr00r90         [ 4]  447 	call	_i2c_set_nak
                                    448 ;	mpu6050.c: 128: i2c_set_stop ();
      00017C CDr00r95         [ 4]  449 	call	_i2c_set_stop
                                    450 ;	mpu6050.c: 129: i2c_read (&x);
      00017F 96               [ 1]  451 	ldw	x, sp
      000180 5C               [ 1]  452 	incw	x
      000181 5C               [ 1]  453 	incw	x
      000182 CDr00r86         [ 4]  454 	call	_i2c_read
                                    455 ;	mpu6050.c: 130: return (x);
      000185 7B 02            [ 1]  456 	ld	a, (0x02, sp)
                                    457 ;	mpu6050.c: 131: }
      000187 5B 03            [ 2]  458 	addw	sp, #3
      000189 85               [ 2]  459 	popw	x
      00018A 5B 01            [ 2]  460 	addw	sp, #1
      00018C FC               [ 2]  461 	jp	(x)
                                    462 ;	mpu6050.c: 133: void InitializeI2C (void) {
                                    463 ;	-----------------------------------------
                                    464 ;	 function InitializeI2C
                                    465 ;	-----------------------------------------
      00018D                        466 _InitializeI2C:
                                    467 ;	mpu6050.c: 134: I2C_CR1 = 0;   //  Disable I2C before configuration starts. PE bit is bit 0
      00018D 35 00 52 10      [ 1]  468 	mov	0x5210+0, #0x00
                                    469 ;	mpu6050.c: 138: I2C_FREQR = 16;                     //  Set the internal clock frequency (MHz).
      000191 35 10 52 12      [ 1]  470 	mov	0x5212+0, #0x10
                                    471 ;	mpu6050.c: 139: UNSET (I2C_CCRH, I2C_FS);           //  I2C running is standard mode.
      000195 72 1F 52 1C      [ 1]  472 	bres	0x521c, #7
                                    473 ;	mpu6050.c: 141: I2C_CCRL = 0xa0;                    //  SCL clock speed is 50 kHz.
      000199 35 A0 52 1B      [ 1]  474 	mov	0x521b+0, #0xa0
                                    475 ;	mpu6050.c: 143: I2C_CCRH &= 0x00;	// Clears lower 4 bits "CCR"
      00019D 35 00 52 1C      [ 1]  476 	mov	0x521c+0, #0x00
                                    477 ;	mpu6050.c: 147: UNSET (I2C_OARH, I2C_ADDMODE);      //  7 bit address mode.
      0001A1 C6 52 14         [ 1]  478 	ld	a, 0x5214
      0001A4 A4 7F            [ 1]  479 	and	a, #0x7f
                                    480 ;	mpu6050.c: 148: SET (I2C_OARH, I2C_ADDCONF);        //  Docs say this must always be 1.
      0001A6 C7 52 14         [ 1]  481 	ld	0x5214, a
      0001A9 AA 40            [ 1]  482 	or	a, #0x40
      0001AB C7 52 14         [ 1]  483 	ld	0x5214, a
                                    484 ;	mpu6050.c: 152: I2C_TRISER = 17;
      0001AE 35 11 52 1D      [ 1]  485 	mov	0x521d+0, #0x11
                                    486 ;	mpu6050.c: 160: I2C_CR1 = I2C_PE;	// Enables port
      0001B2 35 01 52 10      [ 1]  487 	mov	0x5210+0, #0x01
                                    488 ;	mpu6050.c: 164: }
      0001B6 81               [ 4]  489 	ret
                                    490 ;	mpu6050.c: 166: void InitializeUART() {
                                    491 ;	-----------------------------------------
                                    492 ;	 function InitializeUART
                                    493 ;	-----------------------------------------
      0001B7                        494 _InitializeUART:
                                    495 ;	mpu6050.c: 176: UART1_CR1 = 0;
      0001B7 35 00 52 34      [ 1]  496 	mov	0x5234+0, #0x00
                                    497 ;	mpu6050.c: 177: UART1_CR2 = 0;
      0001BB 35 00 52 35      [ 1]  498 	mov	0x5235+0, #0x00
                                    499 ;	mpu6050.c: 178: UART1_CR4 = 0;
      0001BF 35 00 52 37      [ 1]  500 	mov	0x5237+0, #0x00
                                    501 ;	mpu6050.c: 179: UART1_CR3 = 0;
      0001C3 35 00 52 36      [ 1]  502 	mov	0x5236+0, #0x00
                                    503 ;	mpu6050.c: 180: UART1_CR5 = 0;
      0001C7 35 00 52 38      [ 1]  504 	mov	0x5238+0, #0x00
                                    505 ;	mpu6050.c: 181: UART1_GTR = 0;
      0001CB 35 00 52 39      [ 1]  506 	mov	0x5239+0, #0x00
                                    507 ;	mpu6050.c: 182: UART1_PSCR = 0;
      0001CF 35 00 52 3A      [ 1]  508 	mov	0x523a+0, #0x00
                                    509 ;	mpu6050.c: 186: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      0001D3 C6 52 34         [ 1]  510 	ld	a, 0x5234
      0001D6 A4 EF            [ 1]  511 	and	a, #0xef
                                    512 ;	mpu6050.c: 187: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      0001D8 C7 52 34         [ 1]  513 	ld	0x5234, a
      0001DB A4 FB            [ 1]  514 	and	a, #0xfb
      0001DD C7 52 34         [ 1]  515 	ld	0x5234, a
                                    516 ;	mpu6050.c: 188: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      0001E0 C6 52 36         [ 1]  517 	ld	a, 0x5236
      0001E3 A4 DF            [ 1]  518 	and	a, #0xdf
                                    519 ;	mpu6050.c: 189: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      0001E5 C7 52 36         [ 1]  520 	ld	0x5236, a
      0001E8 A4 EF            [ 1]  521 	and	a, #0xef
      0001EA C7 52 36         [ 1]  522 	ld	0x5236, a
                                    523 ;	mpu6050.c: 190: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      0001ED 35 0A 52 33      [ 1]  524 	mov	0x5233+0, #0x0a
                                    525 ;	mpu6050.c: 191: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      0001F1 35 08 52 32      [ 1]  526 	mov	0x5232+0, #0x08
                                    527 ;	mpu6050.c: 195: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      0001F5 C6 52 35         [ 1]  528 	ld	a, 0x5235
      0001F8 A4 F7            [ 1]  529 	and	a, #0xf7
                                    530 ;	mpu6050.c: 196: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      0001FA C7 52 35         [ 1]  531 	ld	0x5235, a
      0001FD A4 FB            [ 1]  532 	and	a, #0xfb
      0001FF C7 52 35         [ 1]  533 	ld	0x5235, a
                                    534 ;	mpu6050.c: 200: SET (UART1_CR3, CR3_CPOL);
      000202 C6 52 36         [ 1]  535 	ld	a, 0x5236
      000205 AA 04            [ 1]  536 	or	a, #0x04
                                    537 ;	mpu6050.c: 201: SET (UART1_CR3, CR3_CPHA);
      000207 C7 52 36         [ 1]  538 	ld	0x5236, a
      00020A AA 02            [ 1]  539 	or	a, #0x02
                                    540 ;	mpu6050.c: 202: SET (UART1_CR3, CR3_LBCL);
      00020C C7 52 36         [ 1]  541 	ld	0x5236, a
      00020F AA 01            [ 1]  542 	or	a, #0x01
      000211 C7 52 36         [ 1]  543 	ld	0x5236, a
                                    544 ;	mpu6050.c: 206: SET (UART1_CR2, CR2_TEN);
      000214 C6 52 35         [ 1]  545 	ld	a, 0x5235
      000217 AA 08            [ 1]  546 	or	a, #0x08
                                    547 ;	mpu6050.c: 207: SET (UART1_CR2, CR2_REN);
      000219 C7 52 35         [ 1]  548 	ld	0x5235, a
      00021C AA 04            [ 1]  549 	or	a, #0x04
      00021E C7 52 35         [ 1]  550 	ld	0x5235, a
                                    551 ;	mpu6050.c: 208: UART1_CR3 = CR3_CLKEN;
      000221 35 08 52 36      [ 1]  552 	mov	0x5236+0, #0x08
                                    553 ;	mpu6050.c: 209: }
      000225 81               [ 4]  554 	ret
                                    555 ;	mpu6050.c: 236: void tm1637Init(void)
                                    556 ;	-----------------------------------------
                                    557 ;	 function tm1637Init
                                    558 ;	-----------------------------------------
      000226                        559 _tm1637Init:
                                    560 ;	mpu6050.c: 238: tm1637SetBrightness(8);
      000226 A6 08            [ 1]  561 	ld	a, #0x08
                                    562 ;	mpu6050.c: 239: }
      000228 CCr02rB6         [ 2]  563 	jp	_tm1637SetBrightness
                                    564 ;	mpu6050.c: 243: void tm1637DisplayDecimal(long TT,unsigned int displaySeparator)
                                    565 ;	-----------------------------------------
                                    566 ;	 function tm1637DisplayDecimal
                                    567 ;	-----------------------------------------
      00022B                        568 _tm1637DisplayDecimal:
      00022B 52 08            [ 2]  569 	sub	sp, #8
                                    570 ;	mpu6050.c: 245: unsigned int v = TT & 0x0000FFFF;
      00022D 16 0D            [ 2]  571 	ldw	y, (0x0d, sp)
                                    572 ;	mpu6050.c: 251: for (ii = 0; ii < 4; ++ii) {
      00022F 5F               [ 1]  573 	clrw	x
      000230 1F 07            [ 2]  574 	ldw	(0x07, sp), x
      000232                        575 00106$:
                                    576 ;	mpu6050.c: 252: digitArr[ii] = segmentMap[v % 10];
      000232 96               [ 1]  577 	ldw	x, sp
      000233 5C               [ 1]  578 	incw	x
      000234 72 FB 07         [ 2]  579 	addw	x, (0x07, sp)
      000237 1F 05            [ 2]  580 	ldw	(0x05, sp), x
      000239 90 89            [ 2]  581 	pushw	y
      00023B 93               [ 1]  582 	ldw	x, y
      00023C 90 AE 00 0A      [ 2]  583 	ldw	y, #0x000a
      000240 65               [ 2]  584 	divw	x, y
      000241 93               [ 1]  585 	ldw	x, y
      000242 90 85            [ 2]  586 	popw	y
      000244 D6u00u00         [ 1]  587 	ld	a, (_segmentMap+0, x)
      000247 1E 05            [ 2]  588 	ldw	x, (0x05, sp)
      000249 F7               [ 1]  589 	ld	(x), a
                                    590 ;	mpu6050.c: 253: if (ii == 2 && displaySeparator) {
      00024A 1E 07            [ 2]  591 	ldw	x, (0x07, sp)
      00024C A3 00 02         [ 2]  592 	cpw	x, #0x0002
      00024F 26 0C            [ 1]  593 	jrne	00102$
      000251 1E 0F            [ 2]  594 	ldw	x, (0x0f, sp)
      000253 27 08            [ 1]  595 	jreq	00102$
                                    596 ;	mpu6050.c: 254: digitArr[ii] |= 1 << 7;
      000255 1E 05            [ 2]  597 	ldw	x, (0x05, sp)
      000257 F6               [ 1]  598 	ld	a, (x)
      000258 AA 80            [ 1]  599 	or	a, #0x80
      00025A 1E 05            [ 2]  600 	ldw	x, (0x05, sp)
      00025C F7               [ 1]  601 	ld	(x), a
      00025D                        602 00102$:
                                    603 ;	mpu6050.c: 256: v /= 10;
      00025D 93               [ 1]  604 	ldw	x, y
      00025E 90 AE 00 0A      [ 2]  605 	ldw	y, #0x000a
      000262 65               [ 2]  606 	divw	x, y
      000263 51               [ 1]  607 	exgw	x, y
                                    608 ;	mpu6050.c: 251: for (ii = 0; ii < 4; ++ii) {
      000264 1E 07            [ 2]  609 	ldw	x, (0x07, sp)
      000266 5C               [ 1]  610 	incw	x
      000267 1F 07            [ 2]  611 	ldw	(0x07, sp), x
      000269 A3 00 04         [ 2]  612 	cpw	x, #0x0004
      00026C 25 C4            [ 1]  613 	jrc	00106$
                                    614 ;	mpu6050.c: 259: _tm1637Start();
      00026E CDr02rC6         [ 4]  615 	call	__tm1637Start
                                    616 ;	mpu6050.c: 260: _tm1637WriteByte(0x40);
      000271 A6 40            [ 1]  617 	ld	a, #0x40
      000273 CDr03r08         [ 4]  618 	call	__tm1637WriteByte
                                    619 ;	mpu6050.c: 261: _tm1637ReadResult();
      000276 CDr02rF3         [ 4]  620 	call	__tm1637ReadResult
                                    621 ;	mpu6050.c: 262: _tm1637Stop();
      000279 CDr02rD5         [ 4]  622 	call	__tm1637Stop
                                    623 ;	mpu6050.c: 264: _tm1637Start();
      00027C CDr02rC6         [ 4]  624 	call	__tm1637Start
                                    625 ;	mpu6050.c: 265: _tm1637WriteByte(0xc0);
      00027F A6 C0            [ 1]  626 	ld	a, #0xc0
      000281 CDr03r08         [ 4]  627 	call	__tm1637WriteByte
                                    628 ;	mpu6050.c: 266: _tm1637ReadResult();
      000284 CDr02rF3         [ 4]  629 	call	__tm1637ReadResult
                                    630 ;	mpu6050.c: 268: for (ii = 0; ii < 4; ++ii) {
      000287 5F               [ 1]  631 	clrw	x
      000288                        632 00108$:
                                    633 ;	mpu6050.c: 269: _tm1637WriteByte(digitArr[3 - ii]);
      000288 9F               [ 1]  634 	ld	a, xl
      000289 6B 08            [ 1]  635 	ld	(0x08, sp), a
      00028B A6 03            [ 1]  636 	ld	a, #0x03
      00028D 10 08            [ 1]  637 	sub	a, (0x08, sp)
      00028F 6B 08            [ 1]  638 	ld	(0x08, sp), a
      000291 49               [ 1]  639 	rlc	a
      000292 4F               [ 1]  640 	clr	a
      000293 A2 00            [ 1]  641 	sbc	a, #0x00
      000295 6B 07            [ 1]  642 	ld	(0x07, sp), a
      000297 90 96            [ 1]  643 	ldw	y, sp
      000299 90 5C            [ 1]  644 	incw	y
      00029B 72 F9 07         [ 2]  645 	addw	y, (0x07, sp)
      00029E 90 F6            [ 1]  646 	ld	a, (y)
      0002A0 89               [ 2]  647 	pushw	x
      0002A1 CDr03r08         [ 4]  648 	call	__tm1637WriteByte
      0002A4 CDr02rF3         [ 4]  649 	call	__tm1637ReadResult
      0002A7 85               [ 2]  650 	popw	x
                                    651 ;	mpu6050.c: 268: for (ii = 0; ii < 4; ++ii) {
      0002A8 5C               [ 1]  652 	incw	x
      0002A9 A3 00 04         [ 2]  653 	cpw	x, #0x0004
      0002AC 25 DA            [ 1]  654 	jrc	00108$
                                    655 ;	mpu6050.c: 273: _tm1637Stop();
      0002AE CDr02rD5         [ 4]  656 	call	__tm1637Stop
                                    657 ;	mpu6050.c: 274: }
      0002B1 1E 09            [ 2]  658 	ldw	x, (9, sp)
      0002B3 5B 10            [ 2]  659 	addw	sp, #16
      0002B5 FC               [ 2]  660 	jp	(x)
                                    661 ;	mpu6050.c: 278: void tm1637SetBrightness(char brightness)
                                    662 ;	-----------------------------------------
                                    663 ;	 function tm1637SetBrightness
                                    664 ;	-----------------------------------------
      0002B6                        665 _tm1637SetBrightness:
                                    666 ;	mpu6050.c: 285: _tm1637Start();
      0002B6 88               [ 1]  667 	push	a
      0002B7 CDr02rC6         [ 4]  668 	call	__tm1637Start
      0002BA 84               [ 1]  669 	pop	a
                                    670 ;	mpu6050.c: 286: _tm1637WriteByte(0x87 + brightness);
      0002BB AB 87            [ 1]  671 	add	a, #0x87
      0002BD CDr03r08         [ 4]  672 	call	__tm1637WriteByte
                                    673 ;	mpu6050.c: 287: _tm1637ReadResult();
      0002C0 CDr02rF3         [ 4]  674 	call	__tm1637ReadResult
                                    675 ;	mpu6050.c: 288: _tm1637Stop();
                                    676 ;	mpu6050.c: 289: }
      0002C3 CCr02rD5         [ 2]  677 	jp	__tm1637Stop
                                    678 ;	mpu6050.c: 291: void _tm1637Start(void)
                                    679 ;	-----------------------------------------
                                    680 ;	 function _tm1637Start
                                    681 ;	-----------------------------------------
      0002C6                        682 __tm1637Start:
                                    683 ;	mpu6050.c: 293: _tm1637ClkHigh();
      0002C6 CDr03r3D         [ 4]  684 	call	__tm1637ClkHigh
                                    685 ;	mpu6050.c: 294: _tm1637DioHigh();
      0002C9 CDr03r47         [ 4]  686 	call	__tm1637DioHigh
                                    687 ;	mpu6050.c: 295: delay(5);
      0002CC AE 00 05         [ 2]  688 	ldw	x, #0x0005
      0002CF CDr00r43         [ 4]  689 	call	_delay
                                    690 ;	mpu6050.c: 296: _tm1637DioLow();
                                    691 ;	mpu6050.c: 297: }
      0002D2 CCr03r4C         [ 2]  692 	jp	__tm1637DioLow
                                    693 ;	mpu6050.c: 299: void _tm1637Stop(void)
                                    694 ;	-----------------------------------------
                                    695 ;	 function _tm1637Stop
                                    696 ;	-----------------------------------------
      0002D5                        697 __tm1637Stop:
                                    698 ;	mpu6050.c: 301: _tm1637ClkLow();
      0002D5 CDr03r42         [ 4]  699 	call	__tm1637ClkLow
                                    700 ;	mpu6050.c: 302: delay(5);
      0002D8 AE 00 05         [ 2]  701 	ldw	x, #0x0005
      0002DB CDr00r43         [ 4]  702 	call	_delay
                                    703 ;	mpu6050.c: 303: _tm1637DioLow();
      0002DE CDr03r4C         [ 4]  704 	call	__tm1637DioLow
                                    705 ;	mpu6050.c: 304: delay(5);
      0002E1 AE 00 05         [ 2]  706 	ldw	x, #0x0005
      0002E4 CDr00r43         [ 4]  707 	call	_delay
                                    708 ;	mpu6050.c: 305: _tm1637ClkHigh();
      0002E7 CDr03r3D         [ 4]  709 	call	__tm1637ClkHigh
                                    710 ;	mpu6050.c: 306: delay(5);
      0002EA AE 00 05         [ 2]  711 	ldw	x, #0x0005
      0002ED CDr00r43         [ 4]  712 	call	_delay
                                    713 ;	mpu6050.c: 307: _tm1637DioHigh();
                                    714 ;	mpu6050.c: 308: }
      0002F0 CCr03r47         [ 2]  715 	jp	__tm1637DioHigh
                                    716 ;	mpu6050.c: 310: void _tm1637ReadResult(void)
                                    717 ;	-----------------------------------------
                                    718 ;	 function _tm1637ReadResult
                                    719 ;	-----------------------------------------
      0002F3                        720 __tm1637ReadResult:
                                    721 ;	mpu6050.c: 312: _tm1637ClkLow();
      0002F3 CDr03r42         [ 4]  722 	call	__tm1637ClkLow
                                    723 ;	mpu6050.c: 313: delay(5);
      0002F6 AE 00 05         [ 2]  724 	ldw	x, #0x0005
      0002F9 CDr00r43         [ 4]  725 	call	_delay
                                    726 ;	mpu6050.c: 315: _tm1637ClkHigh();
      0002FC CDr03r3D         [ 4]  727 	call	__tm1637ClkHigh
                                    728 ;	mpu6050.c: 316: delay(5);
      0002FF AE 00 05         [ 2]  729 	ldw	x, #0x0005
      000302 CDr00r43         [ 4]  730 	call	_delay
                                    731 ;	mpu6050.c: 317: _tm1637ClkLow();
                                    732 ;	mpu6050.c: 318: }
      000305 CCr03r42         [ 2]  733 	jp	__tm1637ClkLow
                                    734 ;	mpu6050.c: 320: void _tm1637WriteByte(unsigned char b)
                                    735 ;	-----------------------------------------
                                    736 ;	 function _tm1637WriteByte
                                    737 ;	-----------------------------------------
      000308                        738 __tm1637WriteByte:
      000308 52 03            [ 2]  739 	sub	sp, #3
      00030A 6B 01            [ 1]  740 	ld	(0x01, sp), a
                                    741 ;	mpu6050.c: 322: for (ii = 0; ii < 8; ++ii) {
      00030C 5F               [ 1]  742 	clrw	x
      00030D 1F 02            [ 2]  743 	ldw	(0x02, sp), x
      00030F                        744 00105$:
                                    745 ;	mpu6050.c: 323: _tm1637ClkLow();
      00030F CDr03r42         [ 4]  746 	call	__tm1637ClkLow
                                    747 ;	mpu6050.c: 324: if (b & 0x01) {
      000312 7B 01            [ 1]  748 	ld	a, (0x01, sp)
      000314 44               [ 1]  749 	srl	a
      000315 24 05            [ 1]  750 	jrnc	00102$
                                    751 ;	mpu6050.c: 325: _tm1637DioHigh();
      000317 CDr03r47         [ 4]  752 	call	__tm1637DioHigh
      00031A 20 03            [ 2]  753 	jra	00103$
      00031C                        754 00102$:
                                    755 ;	mpu6050.c: 328: _tm1637DioLow();
      00031C CDr03r4C         [ 4]  756 	call	__tm1637DioLow
      00031F                        757 00103$:
                                    758 ;	mpu6050.c: 330: delay(15);
      00031F AE 00 0F         [ 2]  759 	ldw	x, #0x000f
      000322 CDr00r43         [ 4]  760 	call	_delay
                                    761 ;	mpu6050.c: 331: b >>= 1;
      000325 04 01            [ 1]  762 	srl	(0x01, sp)
                                    763 ;	mpu6050.c: 332: _tm1637ClkHigh();
      000327 CDr03r3D         [ 4]  764 	call	__tm1637ClkHigh
                                    765 ;	mpu6050.c: 333: delay(15);
      00032A AE 00 0F         [ 2]  766 	ldw	x, #0x000f
      00032D CDr00r43         [ 4]  767 	call	_delay
                                    768 ;	mpu6050.c: 322: for (ii = 0; ii < 8; ++ii) {
      000330 1E 02            [ 2]  769 	ldw	x, (0x02, sp)
      000332 5C               [ 1]  770 	incw	x
      000333 1F 02            [ 2]  771 	ldw	(0x02, sp), x
      000335 A3 00 08         [ 2]  772 	cpw	x, #0x0008
      000338 2F D5            [ 1]  773 	jrslt	00105$
                                    774 ;	mpu6050.c: 335: }
      00033A 5B 03            [ 2]  775 	addw	sp, #3
      00033C 81               [ 4]  776 	ret
                                    777 ;	mpu6050.c: 339: void _tm1637ClkHigh(void)
                                    778 ;	-----------------------------------------
                                    779 ;	 function _tm1637ClkHigh
                                    780 ;	-----------------------------------------
      00033D                        781 __tm1637ClkHigh:
                                    782 ;	mpu6050.c: 344: PD_ODR |= 1 << 2;
      00033D 72 14 50 0F      [ 1]  783 	bset	0x500f, #2
                                    784 ;	mpu6050.c: 345: }
      000341 81               [ 4]  785 	ret
                                    786 ;	mpu6050.c: 347: void _tm1637ClkLow(void)
                                    787 ;	-----------------------------------------
                                    788 ;	 function _tm1637ClkLow
                                    789 ;	-----------------------------------------
      000342                        790 __tm1637ClkLow:
                                    791 ;	mpu6050.c: 351: PD_ODR &= ~(1 << 2);
      000342 72 15 50 0F      [ 1]  792 	bres	0x500f, #2
                                    793 ;	mpu6050.c: 355: }
      000346 81               [ 4]  794 	ret
                                    795 ;	mpu6050.c: 357: void _tm1637DioHigh(void)
                                    796 ;	-----------------------------------------
                                    797 ;	 function _tm1637DioHigh
                                    798 ;	-----------------------------------------
      000347                        799 __tm1637DioHigh:
                                    800 ;	mpu6050.c: 361: PD_ODR |= 1 << 3;
      000347 72 16 50 0F      [ 1]  801 	bset	0x500f, #3
                                    802 ;	mpu6050.c: 363: }
      00034B 81               [ 4]  803 	ret
                                    804 ;	mpu6050.c: 365: void _tm1637DioLow(void)
                                    805 ;	-----------------------------------------
                                    806 ;	 function _tm1637DioLow
                                    807 ;	-----------------------------------------
      00034C                        808 __tm1637DioLow:
                                    809 ;	mpu6050.c: 367: PD_ODR &= ~(1 << 3);
      00034C 72 17 50 0F      [ 1]  810 	bres	0x500f, #3
                                    811 ;	mpu6050.c: 372: }
      000350 81               [ 4]  812 	ret
                                    813 ;	mpu6050.c: 378: void initMPU6050(){
                                    814 ;	-----------------------------------------
                                    815 ;	 function initMPU6050
                                    816 ;	-----------------------------------------
      000351                        817 _initMPU6050:
                                    818 ;	mpu6050.c: 380: i2c_set_start_ack();
      000351 CDr01r0A         [ 4]  819 	call	_i2c_set_start_ack
                                    820 ;	mpu6050.c: 381: i2c_send_address (MPU6050_ADDR, I2C_WRITE);
      000354 4B 00            [ 1]  821 	push	#0x00
      000356 A6 68            [ 1]  822 	ld	a, #0x68
      000358 CDr00rCA         [ 4]  823 	call	_i2c_send_address
                                    824 ;	mpu6050.c: 382: i2c_send_reg(0x6B);
      00035B A6 6B            [ 1]  825 	ld	a, #0x6b
      00035D CDr00r9A         [ 4]  826 	call	_i2c_send_reg
                                    827 ;	mpu6050.c: 383: i2c_send_reg(0x80);
      000360 A6 80            [ 1]  828 	ld	a, #0x80
      000362 CDr00r9A         [ 4]  829 	call	_i2c_send_reg
                                    830 ;	mpu6050.c: 384: i2c_set_stop();
      000365 CDr00r95         [ 4]  831 	call	_i2c_set_stop
                                    832 ;	mpu6050.c: 385: delay(100);
      000368 AE 00 64         [ 2]  833 	ldw	x, #0x0064
      00036B CDr00r43         [ 4]  834 	call	_delay
                                    835 ;	mpu6050.c: 386: i2c_set_start_ack();
      00036E CDr01r0A         [ 4]  836 	call	_i2c_set_start_ack
                                    837 ;	mpu6050.c: 387: i2c_send_address (MPU6050_ADDR, I2C_WRITE);
      000371 4B 00            [ 1]  838 	push	#0x00
      000373 A6 68            [ 1]  839 	ld	a, #0x68
      000375 CDr00rCA         [ 4]  840 	call	_i2c_send_address
                                    841 ;	mpu6050.c: 388: i2c_send_reg(0x6B);
      000378 A6 6B            [ 1]  842 	ld	a, #0x6b
      00037A CDr00r9A         [ 4]  843 	call	_i2c_send_reg
                                    844 ;	mpu6050.c: 389: i2c_send_reg(0x00);
      00037D 4F               [ 1]  845 	clr	a
      00037E CDr00r9A         [ 4]  846 	call	_i2c_send_reg
                                    847 ;	mpu6050.c: 390: i2c_set_stop();
      000381 CDr00r95         [ 4]  848 	call	_i2c_set_stop
                                    849 ;	mpu6050.c: 391: delay(100);
      000384 AE 00 64         [ 2]  850 	ldw	x, #0x0064
      000387 CDr00r43         [ 4]  851 	call	_delay
                                    852 ;	mpu6050.c: 392: i2c_set_start_ack();
      00038A CDr01r0A         [ 4]  853 	call	_i2c_set_start_ack
                                    854 ;	mpu6050.c: 393: i2c_send_address (MPU6050_ADDR, I2C_WRITE);
      00038D 4B 00            [ 1]  855 	push	#0x00
      00038F A6 68            [ 1]  856 	ld	a, #0x68
      000391 CDr00rCA         [ 4]  857 	call	_i2c_send_address
                                    858 ;	mpu6050.c: 394: i2c_send_reg(0x1A);
      000394 A6 1A            [ 1]  859 	ld	a, #0x1a
      000396 CDr00r9A         [ 4]  860 	call	_i2c_send_reg
                                    861 ;	mpu6050.c: 395: i2c_send_reg(0x01);
      000399 A6 01            [ 1]  862 	ld	a, #0x01
      00039B CDr00r9A         [ 4]  863 	call	_i2c_send_reg
                                    864 ;	mpu6050.c: 396: i2c_set_stop();
      00039E CDr00r95         [ 4]  865 	call	_i2c_set_stop
                                    866 ;	mpu6050.c: 397: delay(100);
      0003A1 AE 00 64         [ 2]  867 	ldw	x, #0x0064
      0003A4 CDr00r43         [ 4]  868 	call	_delay
                                    869 ;	mpu6050.c: 398: i2c_set_start_ack();
      0003A7 CDr01r0A         [ 4]  870 	call	_i2c_set_start_ack
                                    871 ;	mpu6050.c: 399: i2c_send_address (MPU6050_ADDR, I2C_WRITE);
      0003AA 4B 00            [ 1]  872 	push	#0x00
      0003AC A6 68            [ 1]  873 	ld	a, #0x68
      0003AE CDr00rCA         [ 4]  874 	call	_i2c_send_address
                                    875 ;	mpu6050.c: 400: i2c_send_reg(0x1B);
      0003B1 A6 1B            [ 1]  876 	ld	a, #0x1b
      0003B3 CDr00r9A         [ 4]  877 	call	_i2c_send_reg
                                    878 ;	mpu6050.c: 401: i2c_send_reg(0x01);
      0003B6 A6 01            [ 1]  879 	ld	a, #0x01
      0003B8 CDr00r9A         [ 4]  880 	call	_i2c_send_reg
                                    881 ;	mpu6050.c: 402: i2c_set_stop();
                                    882 ;	mpu6050.c: 410: }
      0003BB CCr00r95         [ 2]  883 	jp	_i2c_set_stop
                                    884 ;	mpu6050.c: 435: unsigned int getMPU6050(){
                                    885 ;	-----------------------------------------
                                    886 ;	 function getMPU6050
                                    887 ;	-----------------------------------------
      0003BE                        888 _getMPU6050:
      0003BE 52 04            [ 2]  889 	sub	sp, #4
                                    890 ;	mpu6050.c: 439: xh = i2c_read_register (MPU6050_ADDR, 0x43);
      0003C0 4B 43            [ 1]  891 	push	#0x43
      0003C2 A6 68            [ 1]  892 	ld	a, #0x68
      0003C4 CDr01r52         [ 4]  893 	call	_i2c_read_register
      0003C7 6B 03            [ 1]  894 	ld	(0x03, sp), a
                                    895 ;	mpu6050.c: 440: UARTPrintF("read 1 \n\r");
      0003C9 AEr00r11         [ 2]  896 	ldw	x, #(___str_0+0)
      0003CC CDr00rBA         [ 4]  897 	call	_UARTPrintF
                                    898 ;	mpu6050.c: 441: xl = i2c_read_register (MPU6050_ADDR, 0x44);
      0003CF 4B 44            [ 1]  899 	push	#0x44
      0003D1 A6 68            [ 1]  900 	ld	a, #0x68
      0003D3 CDr01r52         [ 4]  901 	call	_i2c_read_register
      0003D6 6B 04            [ 1]  902 	ld	(0x04, sp), a
                                    903 ;	mpu6050.c: 442: UARTPrintF("read 2 \n\r");
      0003D8 AEr00r1B         [ 2]  904 	ldw	x, #(___str_1+0)
      0003DB CDr00rBA         [ 4]  905 	call	_UARTPrintF
                                    906 ;	mpu6050.c: 443: xx = xh << 8 | xl;
      0003DE 7B 03            [ 1]  907 	ld	a, (0x03, sp)
      0003E0 95               [ 1]  908 	ld	xh, a
      0003E1 0F 02            [ 1]  909 	clr	(0x02, sp)
      0003E3 7B 04            [ 1]  910 	ld	a, (0x04, sp)
      0003E5 0F 03            [ 1]  911 	clr	(0x03, sp)
      0003E7 1A 02            [ 1]  912 	or	a, (0x02, sp)
      0003E9 02               [ 1]  913 	rlwa	x
      0003EA 1A 03            [ 1]  914 	or	a, (0x03, sp)
                                    915 ;	mpu6050.c: 444: return(xx);
      0003EC 95               [ 1]  916 	ld	xh, a
                                    917 ;	mpu6050.c: 445: }
      0003ED 5B 04            [ 2]  918 	addw	sp, #4
      0003EF 81               [ 4]  919 	ret
                                    920 ;	mpu6050.c: 448: int main () {
                                    921 ;	-----------------------------------------
                                    922 ;	 function main
                                    923 ;	-----------------------------------------
      0003F0                        924 _main:
      0003F0 52 0C            [ 2]  925 	sub	sp, #12
                                    926 ;	mpu6050.c: 455: InitializeSystemClock();
      0003F2 CDr00r08         [ 4]  927 	call	_InitializeSystemClock
                                    928 ;	mpu6050.c: 457: PB_DDR = (0 << 4);
      0003F5 35 00 50 07      [ 1]  929 	mov	0x5007+0, #0x00
                                    930 ;	mpu6050.c: 458: PB_DDR = (0 << 5);
      0003F9 35 00 50 07      [ 1]  931 	mov	0x5007+0, #0x00
                                    932 ;	mpu6050.c: 463: PD_DDR = (1 << 3) | (1 << 2); // output mode
      0003FD 35 0C 50 11      [ 1]  933 	mov	0x5011+0, #0x0c
                                    934 ;	mpu6050.c: 464: PD_CR2 = (1 << 3) | (1 << 2); // up to 10MHz speed
      000401 35 0C 50 13      [ 1]  935 	mov	0x5013+0, #0x0c
                                    936 ;	mpu6050.c: 465: PD_CR1 = 0; // push-pull
      000405 35 00 50 12      [ 1]  937 	mov	0x5012+0, #0x00
                                    938 ;	mpu6050.c: 466: PD_CR2 = 0; // up to 10MHz speed
      000409 35 00 50 13      [ 1]  939 	mov	0x5013+0, #0x00
                                    940 ;	mpu6050.c: 467: tm1637Init();
      00040D CDr02r26         [ 4]  941 	call	_tm1637Init
                                    942 ;	mpu6050.c: 469: InitializeUART();
      000410 CDr01rB7         [ 4]  943 	call	_InitializeUART
                                    944 ;	mpu6050.c: 470: UARTPrintF("uart initialised \n\r");
      000413 AEr00r25         [ 2]  945 	ldw	x, #(___str_2+0)
      000416 CDr00rBA         [ 4]  946 	call	_UARTPrintF
                                    947 ;	mpu6050.c: 471: InitializeI2C();
      000419 CDr01r8D         [ 4]  948 	call	_InitializeI2C
                                    949 ;	mpu6050.c: 472: delay(200);
      00041C AE 00 C8         [ 2]  950 	ldw	x, #0x00c8
      00041F CDr00r43         [ 4]  951 	call	_delay
                                    952 ;	mpu6050.c: 473: UARTPrintF("testing 0 \n\r");
      000422 AEr00r39         [ 2]  953 	ldw	x, #(___str_3+0)
      000425 CDr00rBA         [ 4]  954 	call	_UARTPrintF
                                    955 ;	mpu6050.c: 474: initMPU6050();
      000428 CDr03r51         [ 4]  956 	call	_initMPU6050
                                    957 ;	mpu6050.c: 475: delay(200);
      00042B AE 00 C8         [ 2]  958 	ldw	x, #0x00c8
      00042E CDr00r43         [ 4]  959 	call	_delay
                                    960 ;	mpu6050.c: 478: UARTPrintF("testing 1 \n\r");
      000431 AEr00r46         [ 2]  961 	ldw	x, #(___str_4+0)
      000434 CDr00rBA         [ 4]  962 	call	_UARTPrintF
                                    963 ;	mpu6050.c: 479: while (1) {
      000437                        964 00114$:
                                    965 ;	mpu6050.c: 480: objTemp = getMPU6050();
      000437 CDr03rBE         [ 4]  966 	call	_getMPU6050
      00043A CDr00r00         [ 4]  967 	call	___uint2fs
      00043D 1F 03            [ 2]  968 	ldw	(0x03, sp), x
      00043F 17 01            [ 2]  969 	ldw	(0x01, sp), y
                                    970 ;	mpu6050.c: 484: while (objTemp > 1000) {
      000441 5F               [ 1]  971 	clrw	x
      000442 1F 0B            [ 2]  972 	ldw	(0x0b, sp), x
      000444                        973 00101$:
      000444 1E 03            [ 2]  974 	ldw	x, (0x03, sp)
      000446 89               [ 2]  975 	pushw	x
      000447 1E 03            [ 2]  976 	ldw	x, (0x03, sp)
      000449 89               [ 2]  977 	pushw	x
      00044A 5F               [ 1]  978 	clrw	x
      00044B 89               [ 2]  979 	pushw	x
      00044C 4B 7A            [ 1]  980 	push	#0x7a
      00044E 4B 44            [ 1]  981 	push	#0x44
      000450 CDr00r00         [ 4]  982 	call	___fslt
      000453 4D               [ 1]  983 	tnz	a
      000454 27 1A            [ 1]  984 	jreq	00127$
                                    985 ;	mpu6050.c: 485: vierde+=1;
      000456 1E 0B            [ 2]  986 	ldw	x, (0x0b, sp)
      000458 5C               [ 1]  987 	incw	x
      000459 1F 0B            [ 2]  988 	ldw	(0x0b, sp), x
                                    989 ;	mpu6050.c: 486: objTemp-=1000;
      00045B 5F               [ 1]  990 	clrw	x
      00045C 89               [ 2]  991 	pushw	x
      00045D 4B 7A            [ 1]  992 	push	#0x7a
      00045F 4B 44            [ 1]  993 	push	#0x44
      000461 1E 07            [ 2]  994 	ldw	x, (0x07, sp)
      000463 89               [ 2]  995 	pushw	x
      000464 1E 07            [ 2]  996 	ldw	x, (0x07, sp)
      000466 89               [ 2]  997 	pushw	x
      000467 CDr00r00         [ 4]  998 	call	___fssub
      00046A 1F 03            [ 2]  999 	ldw	(0x03, sp), x
      00046C 17 01            [ 2] 1000 	ldw	(0x01, sp), y
      00046E 20 D4            [ 2] 1001 	jra	00101$
                                   1002 ;	mpu6050.c: 488: while (objTemp > 100) {
      000470                       1003 00127$:
      000470 16 0B            [ 2] 1004 	ldw	y, (0x0b, sp)
      000472 17 05            [ 2] 1005 	ldw	(0x05, sp), y
      000474 5F               [ 1] 1006 	clrw	x
      000475 1F 0B            [ 2] 1007 	ldw	(0x0b, sp), x
      000477                       1008 00104$:
      000477 1E 03            [ 2] 1009 	ldw	x, (0x03, sp)
      000479 89               [ 2] 1010 	pushw	x
      00047A 1E 03            [ 2] 1011 	ldw	x, (0x03, sp)
      00047C 89               [ 2] 1012 	pushw	x
      00047D 5F               [ 1] 1013 	clrw	x
      00047E 89               [ 2] 1014 	pushw	x
      00047F 4B C8            [ 1] 1015 	push	#0xc8
      000481 4B 42            [ 1] 1016 	push	#0x42
      000483 CDr00r00         [ 4] 1017 	call	___fslt
      000486 4D               [ 1] 1018 	tnz	a
      000487 27 1A            [ 1] 1019 	jreq	00128$
                                   1020 ;	mpu6050.c: 489: derde+=1;
      000489 1E 0B            [ 2] 1021 	ldw	x, (0x0b, sp)
      00048B 5C               [ 1] 1022 	incw	x
      00048C 1F 0B            [ 2] 1023 	ldw	(0x0b, sp), x
                                   1024 ;	mpu6050.c: 490: objTemp-=100;
      00048E 5F               [ 1] 1025 	clrw	x
      00048F 89               [ 2] 1026 	pushw	x
      000490 4B C8            [ 1] 1027 	push	#0xc8
      000492 4B 42            [ 1] 1028 	push	#0x42
      000494 1E 07            [ 2] 1029 	ldw	x, (0x07, sp)
      000496 89               [ 2] 1030 	pushw	x
      000497 1E 07            [ 2] 1031 	ldw	x, (0x07, sp)
      000499 89               [ 2] 1032 	pushw	x
      00049A CDr00r00         [ 4] 1033 	call	___fssub
      00049D 1F 03            [ 2] 1034 	ldw	(0x03, sp), x
      00049F 17 01            [ 2] 1035 	ldw	(0x01, sp), y
      0004A1 20 D4            [ 2] 1036 	jra	00104$
                                   1037 ;	mpu6050.c: 492: while (objTemp > 10) {
      0004A3                       1038 00128$:
      0004A3 16 0B            [ 2] 1039 	ldw	y, (0x0b, sp)
      0004A5 17 07            [ 2] 1040 	ldw	(0x07, sp), y
      0004A7 5F               [ 1] 1041 	clrw	x
      0004A8 1F 0B            [ 2] 1042 	ldw	(0x0b, sp), x
      0004AA                       1043 00107$:
      0004AA 1E 03            [ 2] 1044 	ldw	x, (0x03, sp)
      0004AC 89               [ 2] 1045 	pushw	x
      0004AD 1E 03            [ 2] 1046 	ldw	x, (0x03, sp)
      0004AF 89               [ 2] 1047 	pushw	x
      0004B0 5F               [ 1] 1048 	clrw	x
      0004B1 89               [ 2] 1049 	pushw	x
      0004B2 4B 20            [ 1] 1050 	push	#0x20
      0004B4 4B 41            [ 1] 1051 	push	#0x41
      0004B6 CDr00r00         [ 4] 1052 	call	___fslt
      0004B9 4D               [ 1] 1053 	tnz	a
      0004BA 27 1A            [ 1] 1054 	jreq	00129$
                                   1055 ;	mpu6050.c: 493: tweede+=1;
      0004BC 1E 0B            [ 2] 1056 	ldw	x, (0x0b, sp)
      0004BE 5C               [ 1] 1057 	incw	x
      0004BF 1F 0B            [ 2] 1058 	ldw	(0x0b, sp), x
                                   1059 ;	mpu6050.c: 494: objTemp-=10;
      0004C1 5F               [ 1] 1060 	clrw	x
      0004C2 89               [ 2] 1061 	pushw	x
      0004C3 4B 20            [ 1] 1062 	push	#0x20
      0004C5 4B 41            [ 1] 1063 	push	#0x41
      0004C7 1E 07            [ 2] 1064 	ldw	x, (0x07, sp)
      0004C9 89               [ 2] 1065 	pushw	x
      0004CA 1E 07            [ 2] 1066 	ldw	x, (0x07, sp)
      0004CC 89               [ 2] 1067 	pushw	x
      0004CD CDr00r00         [ 4] 1068 	call	___fssub
      0004D0 1F 03            [ 2] 1069 	ldw	(0x03, sp), x
      0004D2 17 01            [ 2] 1070 	ldw	(0x01, sp), y
      0004D4 20 D4            [ 2] 1071 	jra	00107$
                                   1072 ;	mpu6050.c: 496: while (objTemp > 0)
      0004D6                       1073 00129$:
      0004D6 16 0B            [ 2] 1074 	ldw	y, (0x0b, sp)
      0004D8 17 09            [ 2] 1075 	ldw	(0x09, sp), y
      0004DA 5F               [ 1] 1076 	clrw	x
      0004DB 1F 0B            [ 2] 1077 	ldw	(0x0b, sp), x
      0004DD                       1078 00110$:
      0004DD 1E 03            [ 2] 1079 	ldw	x, (0x03, sp)
      0004DF 89               [ 2] 1080 	pushw	x
      0004E0 1E 03            [ 2] 1081 	ldw	x, (0x03, sp)
      0004E2 89               [ 2] 1082 	pushw	x
      0004E3 5F               [ 1] 1083 	clrw	x
      0004E4 89               [ 2] 1084 	pushw	x
      0004E5 5F               [ 1] 1085 	clrw	x
      0004E6 89               [ 2] 1086 	pushw	x
      0004E7 CDr00r00         [ 4] 1087 	call	___fslt
      0004EA 4D               [ 1] 1088 	tnz	a
      0004EB 27 1A            [ 1] 1089 	jreq	00112$
                                   1090 ;	mpu6050.c: 498: eerste+=1;
      0004ED 1E 0B            [ 2] 1091 	ldw	x, (0x0b, sp)
      0004EF 5C               [ 1] 1092 	incw	x
      0004F0 1F 0B            [ 2] 1093 	ldw	(0x0b, sp), x
                                   1094 ;	mpu6050.c: 499: objTemp-=1;
      0004F2 5F               [ 1] 1095 	clrw	x
      0004F3 89               [ 2] 1096 	pushw	x
      0004F4 4B 80            [ 1] 1097 	push	#0x80
      0004F6 4B 3F            [ 1] 1098 	push	#0x3f
      0004F8 1E 07            [ 2] 1099 	ldw	x, (0x07, sp)
      0004FA 89               [ 2] 1100 	pushw	x
      0004FB 1E 07            [ 2] 1101 	ldw	x, (0x07, sp)
      0004FD 89               [ 2] 1102 	pushw	x
      0004FE CDr00r00         [ 4] 1103 	call	___fssub
      000501 1F 03            [ 2] 1104 	ldw	(0x03, sp), x
      000503 17 01            [ 2] 1105 	ldw	(0x01, sp), y
      000505 20 D6            [ 2] 1106 	jra	00110$
      000507                       1107 00112$:
                                   1108 ;	mpu6050.c: 510: utemp=vierde*1000+derde*100+tweede*10+eerste;
      000507 1E 05            [ 2] 1109 	ldw	x, (0x05, sp)
      000509 89               [ 2] 1110 	pushw	x
      00050A AE 03 E8         [ 2] 1111 	ldw	x, #0x03e8
      00050D CDr00r00         [ 4] 1112 	call	__mulint
      000510 1F 05            [ 2] 1113 	ldw	(0x05, sp), x
      000512 1E 07            [ 2] 1114 	ldw	x, (0x07, sp)
      000514 89               [ 2] 1115 	pushw	x
      000515 AE 00 64         [ 2] 1116 	ldw	x, #0x0064
      000518 CDr00r00         [ 4] 1117 	call	__mulint
      00051B 72 FB 05         [ 2] 1118 	addw	x, (0x05, sp)
      00051E 1F 07            [ 2] 1119 	ldw	(0x07, sp), x
      000520 1E 09            [ 2] 1120 	ldw	x, (0x09, sp)
      000522 58               [ 2] 1121 	sllw	x
      000523 58               [ 2] 1122 	sllw	x
      000524 72 FB 09         [ 2] 1123 	addw	x, (0x09, sp)
      000527 58               [ 2] 1124 	sllw	x
      000528 72 FB 07         [ 2] 1125 	addw	x, (0x07, sp)
      00052B 72 FB 0B         [ 2] 1126 	addw	x, (0x0b, sp)
      00052E 90 5F            [ 1] 1127 	clrw	y
      000530 5D               [ 2] 1128 	tnzw	x
      000531 2A 02            [ 1] 1129 	jrpl	00175$
      000533 90 5A            [ 2] 1130 	decw	y
      000535                       1131 00175$:
                                   1132 ;	mpu6050.c: 513: tm1637DisplayDecimal(utemp, 1); // eg 37:12
      000535 4B 01            [ 1] 1133 	push	#0x01
      000537 4B 00            [ 1] 1134 	push	#0x00
      000539 89               [ 2] 1135 	pushw	x
      00053A 90 89            [ 2] 1136 	pushw	y
      00053C CDr02r2B         [ 4] 1137 	call	_tm1637DisplayDecimal
                                   1138 ;	mpu6050.c: 517: delayTenMicro();
      00053F CDr00r00         [ 4] 1139 	call	_delayTenMicro
                                   1140 ;	mpu6050.c: 519: }
      000542 CCr04r37         [ 2] 1141 	jp	00114$
                                   1142 	.area CODE
                                   1143 	.area CONST
      000000                       1144 _segmentMap:
      000000 3F                    1145 	.db #0x3f	; 63
      000001 06                    1146 	.db #0x06	; 6
      000002 5B                    1147 	.db #0x5b	; 91
      000003 4F                    1148 	.db #0x4f	; 79	'O'
      000004 66                    1149 	.db #0x66	; 102	'f'
      000005 6D                    1150 	.db #0x6d	; 109	'm'
      000006 7D                    1151 	.db #0x7d	; 125
      000007 07                    1152 	.db #0x07	; 7
      000008 7F                    1153 	.db #0x7f	; 127
      000009 6F                    1154 	.db #0x6f	; 111	'o'
      00000A 77                    1155 	.db #0x77	; 119	'w'
      00000B 7C                    1156 	.db #0x7c	; 124
      00000C 39                    1157 	.db #0x39	; 57	'9'
      00000D 5E                    1158 	.db #0x5e	; 94
      00000E 79                    1159 	.db #0x79	; 121	'y'
      00000F 71                    1160 	.db #0x71	; 113	'q'
      000010 00                    1161 	.db #0x00	; 0
                                   1162 	.area CONST
      000011                       1163 ___str_0:
      000011 72 65 61 64 20 31 20  1164 	.ascii "read 1 "
      000018 0A                    1165 	.db 0x0a
      000019 0D                    1166 	.db 0x0d
      00001A 00                    1167 	.db 0x00
                                   1168 	.area CODE
                                   1169 	.area CONST
      00001B                       1170 ___str_1:
      00001B 72 65 61 64 20 32 20  1171 	.ascii "read 2 "
      000022 0A                    1172 	.db 0x0a
      000023 0D                    1173 	.db 0x0d
      000024 00                    1174 	.db 0x00
                                   1175 	.area CODE
                                   1176 	.area CONST
      000025                       1177 ___str_2:
      000025 75 61 72 74 20 69 6E  1178 	.ascii "uart initialised "
             69 74 69 61 6C 69 73
             65 64 20
      000036 0A                    1179 	.db 0x0a
      000037 0D                    1180 	.db 0x0d
      000038 00                    1181 	.db 0x00
                                   1182 	.area CODE
                                   1183 	.area CONST
      000039                       1184 ___str_3:
      000039 74 65 73 74 69 6E 67  1185 	.ascii "testing 0 "
             20 30 20
      000043 0A                    1186 	.db 0x0a
      000044 0D                    1187 	.db 0x0d
      000045 00                    1188 	.db 0x00
                                   1189 	.area CODE
                                   1190 	.area CONST
      000046                       1191 ___str_4:
      000046 74 65 73 74 69 6E 67  1192 	.ascii "testing 1 "
             20 31 20
      000050 0A                    1193 	.db 0x0a
      000051 0D                    1194 	.db 0x0d
      000052 00                    1195 	.db 0x00
                                   1196 	.area CODE
                                   1197 	.area INITIALIZER
                                   1198 	.area CABS (ABS)
