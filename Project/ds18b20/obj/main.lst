                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  3 2018) (Linux)
                                      4 ; This file was generated Tue Feb 11 21:31:46 2025
                                      5 ;--------------------------------------------------------
                                      6 	.module main
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _DS18x20_ReadTemp
                                     14 	.globl _OneWireReadByte
                                     15 	.globl _OneWireWriteByte
                                     16 	.globl _OneWireReset
                                     17 	.globl _TM1637_clear
                                     18 	.globl _TM1637_DISPLAY_DIGIT
                                     19 	.globl _TM1637_INIT
                                     20 	.globl _delay_us
                                     21 	.globl _GPIO_Init
                                     22 	.globl _CLK_HSIPrescalerConfig
                                     23 	.globl _chuctp
                                     24 	.globl _tramtp
                                     25 	.globl _donvi
                                     26 	.globl _chuc
                                     27 	.globl _temp
                                     28 ;--------------------------------------------------------
                                     29 ; ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DATA
      000000                         32 _temp::
      000000                         33 	.ds 4
      000004                         34 _chuc::
      000004                         35 	.ds 1
      000005                         36 _donvi::
      000005                         37 	.ds 1
      000006                         38 _tramtp::
      000006                         39 	.ds 1
      000007                         40 _chuctp::
      000007                         41 	.ds 1
                                     42 ;--------------------------------------------------------
                                     43 ; ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area INITIALIZED
                                     46 ;--------------------------------------------------------
                                     47 ; Stack segment in internal ram 
                                     48 ;--------------------------------------------------------
                                     49 	.area	SSEG
      000000                         50 __start__stack:
      000000                         51 	.ds	1
                                     52 
                                     53 ;--------------------------------------------------------
                                     54 ; absolute external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area DABS (ABS)
                                     57 ;--------------------------------------------------------
                                     58 ; interrupt vector 
                                     59 ;--------------------------------------------------------
                                     60 	.area HOME
      000000                         61 __interrupt_vect:
      000000 82v00u00u00             62 	int s_GSINIT ;reset
      000004 82 00 00 00             63 	int 0x0000 ;trap
      000008 82 00 00 00             64 	int 0x0000 ;int0
      00000C 82 00 00 00             65 	int 0x0000 ;int1
      000010 82 00 00 00             66 	int 0x0000 ;int2
      000014 82 00 00 00             67 	int 0x0000 ;int3
      000018 82 00 00 00             68 	int 0x0000 ;int4
      00001C 82 00 00 00             69 	int 0x0000 ;int5
      000020 82 00 00 00             70 	int 0x0000 ;int6
      000024 82 00 00 00             71 	int 0x0000 ;int7
      000028 82 00 00 00             72 	int 0x0000 ;int8
      00002C 82 00 00 00             73 	int 0x0000 ;int9
      000030 82 00 00 00             74 	int 0x0000 ;int10
      000034 82 00 00 00             75 	int 0x0000 ;int11
      000038 82 00 00 00             76 	int 0x0000 ;int12
      00003C 82 00 00 00             77 	int 0x0000 ;int13
      000040 82 00 00 00             78 	int 0x0000 ;int14
      000044 82 00 00 00             79 	int 0x0000 ;int15
      000048 82 00 00 00             80 	int 0x0000 ;int16
      00004C 82 00 00 00             81 	int 0x0000 ;int17
      000050 82 00 00 00             82 	int 0x0000 ;int18
      000054 82 00 00 00             83 	int 0x0000 ;int19
      000058 82 00 00 00             84 	int 0x0000 ;int20
      00005C 82 00 00 00             85 	int 0x0000 ;int21
      000060 82 00 00 00             86 	int 0x0000 ;int22
      000064 82 00 00 00             87 	int 0x0000 ;int23
      000068 82 00 00 00             88 	int 0x0000 ;int24
      00006C 82 00 00 00             89 	int 0x0000 ;int25
      000070 82 00 00 00             90 	int 0x0000 ;int26
      000074 82 00 00 00             91 	int 0x0000 ;int27
      000078 82 00 00 00             92 	int 0x0000 ;int28
      00007C 82 00 00 00             93 	int 0x0000 ;int29
                                     94 ;--------------------------------------------------------
                                     95 ; global & static initialisations
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME
                                     98 	.area GSINIT
                                     99 	.area GSFINAL
                                    100 	.area GSINIT
      000000                        101 __sdcc_gs_init_startup:
      000000                        102 __sdcc_init_data:
                                    103 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  104 	ldw x, #l_DATA
      000003 27 07            [ 1]  105 	jreq	00002$
      000005                        106 00001$:
      000005 72 4FuFFuFF      [ 1]  107 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  108 	decw x
      00000A 26 F9            [ 1]  109 	jrne	00001$
      00000C                        110 00002$:
      00000C AEr00r00         [ 2]  111 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  112 	jreq	00004$
      000011                        113 00003$:
      000011 D6uFFuFF         [ 1]  114 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  115 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  116 	decw	x
      000018 26 F7            [ 1]  117 	jrne	00003$
      00001A                        118 00004$:
                                    119 ; stm8_genXINIT() end
                                    120 	.area GSFINAL
      000000 CCr00r80         [ 2]  121 	jp	__sdcc_program_startup
                                    122 ;--------------------------------------------------------
                                    123 ; Home
                                    124 ;--------------------------------------------------------
                                    125 	.area HOME
                                    126 	.area HOME
      000080                        127 __sdcc_program_startup:
      000080 CCr00r63         [ 2]  128 	jp	_main
                                    129 ;	return from main will return to caller
                                    130 ;--------------------------------------------------------
                                    131 ; code
                                    132 ;--------------------------------------------------------
                                    133 	.area CODE
                                    134 ;	main.c: 37: void DS18x20_ReadTemp(void) {
                                    135 ;	-----------------------------------------
                                    136 ;	 function DS18x20_ReadTemp
                                    137 ;	-----------------------------------------
      000000                        138 _DS18x20_ReadTemp:
      000000 52 05            [ 2]  139 	sub	sp, #5
                                    140 ;	main.c: 41: OneWireReset();                       // Reset Pulse
      000002 CDr00r00         [ 4]  141 	call	_OneWireReset
                                    142 ;	main.c: 42: OneWireWriteByte(SKIP_ROM);           // Issue skip ROM command (CCh)
      000005 4B CC            [ 1]  143 	push	#0xcc
      000007 CDr00r00         [ 4]  144 	call	_OneWireWriteByte
      00000A 84               [ 1]  145 	pop	a
                                    146 ;	main.c: 43: OneWireWriteByte(CONVERT_T);          // Convert T command (44h)
      00000B 4B 44            [ 1]  147 	push	#0x44
      00000D CDr00r00         [ 4]  148 	call	_OneWireWriteByte
      000010 84               [ 1]  149 	pop	a
                                    150 ;	main.c: 44: while(!OW_PIN_VALUE());               // DQ will hold line low while making measurement
      000011                        151 00101$:
      000011 AE 50 0B         [ 2]  152 	ldw	x, #0x500b
      000014 F6               [ 1]  153 	ld	a, (x)
      000015 A5 10            [ 1]  154 	bcp	a, #0x10
      000017 27 F8            [ 1]  155 	jreq	00101$
                                    156 ;	main.c: 45: OneWireReset();                       // Start new command sequence
      000019 CDr00r00         [ 4]  157 	call	_OneWireReset
                                    158 ;	main.c: 46: OneWireWriteByte(SKIP_ROM);           // Issue skip ROM command
      00001C 4B CC            [ 1]  159 	push	#0xcc
      00001E CDr00r00         [ 4]  160 	call	_OneWireWriteByte
      000021 84               [ 1]  161 	pop	a
                                    162 ;	main.c: 47: OneWireWriteByte(READ_SCRATCHPAD);    // Read Scratchpad (BEh) - 15 bits
      000022 4B BE            [ 1]  163 	push	#0xbe
      000024 CDr00r00         [ 4]  164 	call	_OneWireWriteByte
      000027 84               [ 1]  165 	pop	a
                                    166 ;	main.c: 48: LSB = OneWireReadByte();
      000028 CDr00r00         [ 4]  167 	call	_OneWireReadByte
      00002B 6B 01            [ 1]  168 	ld	(0x01, sp), a
                                    169 ;	main.c: 49: MSB = OneWireReadByte();
      00002D CDr00r00         [ 4]  170 	call	_OneWireReadByte
                                    171 ;	main.c: 50: OneWireReset();                       // Stop Reading
      000030 88               [ 1]  172 	push	a
      000031 CDr00r00         [ 4]  173 	call	_OneWireReset
      000034 84               [ 1]  174 	pop	a
                                    175 ;	main.c: 52: temp = (((MSB << 8) | LSB)/ 16.0);
      000035 95               [ 1]  176 	ld	xh, a
      000036 4F               [ 1]  177 	clr	a
      000037 0F 05            [ 1]  178 	clr	(0x05, sp)
      000039 7B 01            [ 1]  179 	ld	a, (0x01, sp)
      00003B 0F 02            [ 1]  180 	clr	(0x02, sp)
      00003D 1A 05            [ 1]  181 	or	a, (0x05, sp)
      00003F 02               [ 1]  182 	rlwa	x
      000040 1A 02            [ 1]  183 	or	a, (0x02, sp)
      000042 95               [ 1]  184 	ld	xh, a
      000043 89               [ 2]  185 	pushw	x
      000044 CDr00r00         [ 4]  186 	call	___sint2fs
      000047 5B 02            [ 2]  187 	addw	sp, #2
      000049 4B 00            [ 1]  188 	push	#0x00
      00004B 4B 00            [ 1]  189 	push	#0x00
      00004D 4B 80            [ 1]  190 	push	#0x80
      00004F 4B 41            [ 1]  191 	push	#0x41
      000051 89               [ 2]  192 	pushw	x
      000052 90 89            [ 2]  193 	pushw	y
      000054 CDr00r00         [ 4]  194 	call	___fsdiv
      000057 5B 08            [ 2]  195 	addw	sp, #8
      000059 CFu00u02         [ 2]  196 	ldw	_temp+2, x
      00005C 90 CFu00u00      [ 2]  197 	ldw	_temp+0, y
      000060 5B 05            [ 2]  198 	addw	sp, #5
      000062 81               [ 4]  199 	ret
                                    200 ;	main.c: 56: void main(void)
                                    201 ;	-----------------------------------------
                                    202 ;	 function main
                                    203 ;	-----------------------------------------
      000063                        204 _main:
                                    205 ;	main.c: 59: CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV2);
      000063 4B 08            [ 1]  206 	push	#0x08
      000065 CDr00r00         [ 4]  207 	call	_CLK_HSIPrescalerConfig
      000068 84               [ 1]  208 	pop	a
                                    209 ;	main.c: 63: GPIO_Init(GPIOB, GPIO_PIN_5, GPIO_MODE_OUT_OD_LOW_FAST);
      000069 4B A0            [ 1]  210 	push	#0xa0
      00006B 4B 20            [ 1]  211 	push	#0x20
      00006D 4B 05            [ 1]  212 	push	#0x05
      00006F 4B 50            [ 1]  213 	push	#0x50
      000071 CDr00r00         [ 4]  214 	call	_GPIO_Init
      000074 5B 04            [ 2]  215 	addw	sp, #4
                                    216 ;	main.c: 66: TM1637_INIT(1, 1);
      000076 4B 01            [ 1]  217 	push	#0x01
      000078 4B 01            [ 1]  218 	push	#0x01
      00007A CDr00r00         [ 4]  219 	call	_TM1637_INIT
      00007D 5B 02            [ 2]  220 	addw	sp, #2
                                    221 ;	main.c: 67: TM1637_clear();
      00007F CDr00r00         [ 4]  222 	call	_TM1637_clear
                                    223 ;	main.c: 69: while (1)
      000082                        224 00102$:
                                    225 ;	main.c: 72: LED_PORT->ODR ^= (uint8_t)LED_PIN;
      000082 AE 50 05         [ 2]  226 	ldw	x, #0x5005
      000085 F6               [ 1]  227 	ld	a, (x)
      000086 A8 20            [ 1]  228 	xor	a, #0x20
      000088 F7               [ 1]  229 	ld	(x), a
                                    230 ;	main.c: 73: DS18x20_ReadTemp();
      000089 CDr00r00         [ 4]  231 	call	_DS18x20_ReadTemp
                                    232 ;	main.c: 74: delay_us(65000);
      00008C 4B E8            [ 1]  233 	push	#0xe8
      00008E 4B FD            [ 1]  234 	push	#0xfd
      000090 CDr00r00         [ 4]  235 	call	_delay_us
      000093 5B 02            [ 2]  236 	addw	sp, #2
                                    237 ;	main.c: 75: chuc = (uint8_t) (temp / 10.0) % 10;
      000095 5F               [ 1]  238 	clrw	x
      000096 89               [ 2]  239 	pushw	x
      000097 4B 20            [ 1]  240 	push	#0x20
      000099 4B 41            [ 1]  241 	push	#0x41
      00009B 3Bu00u03         [ 1]  242 	push	_temp+3
      00009E 3Bu00u02         [ 1]  243 	push	_temp+2
      0000A1 3Bu00u01         [ 1]  244 	push	_temp+1
      0000A4 3Bu00u00         [ 1]  245 	push	_temp+0
      0000A7 CDr00r00         [ 4]  246 	call	___fsdiv
      0000AA 5B 08            [ 2]  247 	addw	sp, #8
      0000AC 89               [ 2]  248 	pushw	x
      0000AD 90 89            [ 2]  249 	pushw	y
      0000AF CDr00r00         [ 4]  250 	call	___fs2uchar
      0000B2 5B 04            [ 2]  251 	addw	sp, #4
      0000B4 5F               [ 1]  252 	clrw	x
      0000B5 97               [ 1]  253 	ld	xl, a
      0000B6 A6 0A            [ 1]  254 	ld	a, #0x0a
      0000B8 62               [ 2]  255 	div	x, a
      0000B9 C7u00u04         [ 1]  256 	ld	_chuc+0, a
                                    257 ;	main.c: 76: donvi = (uint8_t) (temp / 1.0) % 10;
      0000BC 90 CEu00u02      [ 2]  258 	ldw	y, _temp+2
      0000C0 CEu00u00         [ 2]  259 	ldw	x, _temp+0
      0000C3 90 89            [ 2]  260 	pushw	y
      0000C5 89               [ 2]  261 	pushw	x
      0000C6 CDr00r00         [ 4]  262 	call	___fs2uchar
      0000C9 5B 04            [ 2]  263 	addw	sp, #4
      0000CB 5F               [ 1]  264 	clrw	x
      0000CC 97               [ 1]  265 	ld	xl, a
      0000CD A6 0A            [ 1]  266 	ld	a, #0x0a
      0000CF 62               [ 2]  267 	div	x, a
      0000D0 C7u00u05         [ 1]  268 	ld	_donvi+0, a
                                    269 ;	main.c: 77: chuctp = (uint8_t) (temp * 10.0) % 10;
      0000D3 3Bu00u03         [ 1]  270 	push	_temp+3
      0000D6 3Bu00u02         [ 1]  271 	push	_temp+2
      0000D9 3Bu00u01         [ 1]  272 	push	_temp+1
      0000DC 3Bu00u00         [ 1]  273 	push	_temp+0
      0000DF 5F               [ 1]  274 	clrw	x
      0000E0 89               [ 2]  275 	pushw	x
      0000E1 4B 20            [ 1]  276 	push	#0x20
      0000E3 4B 41            [ 1]  277 	push	#0x41
      0000E5 CDr00r00         [ 4]  278 	call	___fsmul
      0000E8 5B 08            [ 2]  279 	addw	sp, #8
      0000EA 89               [ 2]  280 	pushw	x
      0000EB 90 89            [ 2]  281 	pushw	y
      0000ED CDr00r00         [ 4]  282 	call	___fs2uchar
      0000F0 5B 04            [ 2]  283 	addw	sp, #4
      0000F2 5F               [ 1]  284 	clrw	x
      0000F3 97               [ 1]  285 	ld	xl, a
      0000F4 A6 0A            [ 1]  286 	ld	a, #0x0a
      0000F6 62               [ 2]  287 	div	x, a
      0000F7 C7u00u07         [ 1]  288 	ld	_chuctp+0, a
                                    289 ;	main.c: 78: tramtp = (uint8_t) (temp * 100.0) % 10;
      0000FA 3Bu00u03         [ 1]  290 	push	_temp+3
      0000FD 3Bu00u02         [ 1]  291 	push	_temp+2
      000100 3Bu00u01         [ 1]  292 	push	_temp+1
      000103 3Bu00u00         [ 1]  293 	push	_temp+0
      000106 5F               [ 1]  294 	clrw	x
      000107 89               [ 2]  295 	pushw	x
      000108 4B C8            [ 1]  296 	push	#0xc8
      00010A 4B 42            [ 1]  297 	push	#0x42
      00010C CDr00r00         [ 4]  298 	call	___fsmul
      00010F 5B 08            [ 2]  299 	addw	sp, #8
      000111 89               [ 2]  300 	pushw	x
      000112 90 89            [ 2]  301 	pushw	y
      000114 CDr00r00         [ 4]  302 	call	___fs2uchar
      000117 5B 04            [ 2]  303 	addw	sp, #4
      000119 5F               [ 1]  304 	clrw	x
      00011A 97               [ 1]  305 	ld	xl, a
      00011B A6 0A            [ 1]  306 	ld	a, #0x0a
      00011D 62               [ 2]  307 	div	x, a
      00011E C7u00u06         [ 1]  308 	ld	_tramtp+0, a
                                    309 ;	main.c: 79: TM1637_DISPLAY_DIGIT(0x00, chuc);
      000121 3Bu00u04         [ 1]  310 	push	_chuc+0
      000124 4B 00            [ 1]  311 	push	#0x00
      000126 CDr00r00         [ 4]  312 	call	_TM1637_DISPLAY_DIGIT
      000129 5B 02            [ 2]  313 	addw	sp, #2
                                    314 ;	main.c: 80: TM1637_DISPLAY_DIGIT(0x01, donvi);
      00012B 3Bu00u05         [ 1]  315 	push	_donvi+0
      00012E 4B 01            [ 1]  316 	push	#0x01
      000130 CDr00r00         [ 4]  317 	call	_TM1637_DISPLAY_DIGIT
      000133 5B 02            [ 2]  318 	addw	sp, #2
                                    319 ;	main.c: 81: TM1637_DISPLAY_DIGIT(0x02, chuctp);
      000135 3Bu00u07         [ 1]  320 	push	_chuctp+0
      000138 4B 02            [ 1]  321 	push	#0x02
      00013A CDr00r00         [ 4]  322 	call	_TM1637_DISPLAY_DIGIT
      00013D 5B 02            [ 2]  323 	addw	sp, #2
                                    324 ;	main.c: 82: TM1637_DISPLAY_DIGIT(0x03, tramtp);
      00013F 3Bu00u06         [ 1]  325 	push	_tramtp+0
      000142 4B 03            [ 1]  326 	push	#0x03
      000144 CDr00r00         [ 4]  327 	call	_TM1637_DISPLAY_DIGIT
      000147 5B 02            [ 2]  328 	addw	sp, #2
      000149 CCr00r82         [ 2]  329 	jp	00102$
      00014C 81               [ 4]  330 	ret
                                    331 	.area CODE
                                    332 	.area INITIALIZER
                                    333 	.area CABS (ABS)
